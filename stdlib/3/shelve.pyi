import collections
from typing import Any, Dict, Generic, Iterator, Optional, Tuple, TypeVar

_VT = TypeVar("_VT")

class Shelf(collections.MutableMapping[str, _VT], Generic[_VT]):
    def __init__(
        self, dict: Dict[bytes, _VT], protocol: Optional[int] = ..., writeback: bool = ..., keyencoding: str = ...
    ) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: str) -> _VT: ...
    def __setitem__(self, key: str, value: _VT) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __enter__(self) -> Shelf: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    def sync(self) -> None: ...

class BsdDbShelf(Shelf, Generic[_VT]):
    def __init__(
        self, dict: Dict[bytes, _VT], protocol: Optional[int] = ..., writeback: bool = ..., keyencoding: str = ...
    ) -> None: ...
    def set_location(self, key: str) -> Tuple[str, _VT]: ...
    def next(self) -> Tuple[str, _VT]: ...
    def previous(self) -> Tuple[str, _VT]: ...
    def first(self) -> Tuple[str, _VT]: ...
    def last(self) -> Tuple[str, _VT]: ...

class DbfilenameShelf(Shelf):
    def __init__(self, filename: str, flag: str = ..., protocol: Optional[int] = ..., writeback: bool = ...) -> None: ...

def open(filename: str, flag: str = ..., protocol: Optional[int] = ..., writeback: bool = ...) -> DbfilenameShelf: ...
